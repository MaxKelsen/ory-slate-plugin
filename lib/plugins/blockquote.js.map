{"version":3,"sources":["../../src/plugins/blockquote.js"],"names":["BLOCKQUOTE","BlockquotePlugin","props","Button","editorState","onChange","onClick","e","preventDefault","isActive","blocks","some","Boolean","document","getClosest","block","key","parent","type","transform","unwrapBlock","wrapBlock","apply","name","nodes","plugins","typeDefault","DEFAULT_NODE","deserialize","el","next","tagName","toLowerCase","kind","childNodes","serialize","object","children","textAlign","data","get","Plugin"],"mappings":";;;;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;;;;;;;;;+eANA;;;AASO,IAAMA,kCAAa,uBAAnB;;IAEcC,gB;;;AACnB,4BAAYC,KAAZ,EAA0B;AAAA;;AAAA,oIAClBA,KADkB;;AAAA,UAO1BC,MAP0B,GAOjB,gBAAsC;AAAA,UAAnCC,WAAmC,QAAnCA,WAAmC;AAAA,UAAtBC,QAAsB,QAAtBA,QAAsB;;AAC7C,UAAMC,UAAU,SAAVA,OAAU,IAAK;AACnBC,UAAEC,cAAF;;AAEA,YAAMC,WAAWL,YAAYM,MAAZ,CAAmBC,IAAnB,CAAwB;AAAA,iBACvCC,QACER,YAAYS,QAAZ,CAAqBC,UAArB,CACEC,MAAMC,GADR,EAEE;AAAA,mBAAUC,OAAOC,IAAP,KAAgBlB,UAA1B;AAAA,WAFF,CADF,CADuC;AAAA,SAAxB,CAAjB;;AASA,YAAImB,YAAYf,YAAYe,SAAZ,EAAhB;;AAEA,YAAIV,QAAJ,EAAc;AACZU,sBAAYA,UAAUC,WAAV,CAAsBpB,UAAtB,CAAZ;AACD,SAFD,MAEO;AACLmB,sBAAYA,UAAUE,SAAV,CAAoBrB,UAApB,CAAZ;AACD;;AAEDK,iBAASc,UAAUG,KAAV,EAAT;AACD,OArBD;;AAuBA,UAAMb,WAAWL,YAAYM,MAAZ,CAAmBC,IAAnB,CAAwB;AAAA,eACvCC,QACER,YAAYS,QAAZ,CAAqBC,UAArB,CACEC,MAAMC,GADR,EAEE;AAAA,iBAAUC,OAAOC,IAAP,KAAgBlB,UAA1B;AAAA,SAFF,CADF,CADuC;AAAA,OAAxB,CAAjB;;AASA;AACA;AACA;AACA,aAAO,IAAP;;AAEA;;;;;;;;;AASD,KAtDyB;;AAAA,UAwD1BuB,IAxD0B,GAwDnB,YAxDmB;AAAA,UA0D1BC,KA1D0B,uBA2DvBxB,UA3DuB,EA2DV,0BAAY,YAAZ,CA3DU;AAAA,UA8D1ByB,OA9D0B,GA8DhB,CACR,mCAAuB;AACrBP,YAAMlB,UADe;AAErB0B,mBAAa,MAAKC;AAFG,KAAvB,CADQ,CA9DgB;;AAAA,UAuE1BC,WAvE0B,GAuEZ,UAACC,EAAD,EAAKC,IAAL,EAAc;AAC1B,cAAQD,GAAGE,OAAH,CAAWC,WAAX,EAAR;AACE,aAAK,YAAL;AACE,iBAAO;AACLC,kBAAM,OADD;AAELf,kBAAMlB,UAFD;AAGLwB,mBAAOM,KAAKD,GAAGK,UAAR;AAHF,WAAP;AAFJ;AAQD,KAhFyB;;AAAA,UAkF1BC,SAlF0B,GAkFd,UACVC,MADU,EAEVC,QAFU,EAGP;AACH,UAAID,OAAOH,IAAP,KAAgB,OAApB,EAA6B;AAC3B;AACD;AACD,cAAQG,OAAOlB,IAAf;AACE,aAAKlB,UAAL;AACE,iBACE;AAAA;AAAA,cAAY,OAAO,EAAEsC,WAAWF,OAAOG,IAAP,CAAYC,GAAZ,CAAgB,OAAhB,CAAb,EAAnB;AACGH;AADH,WADF;AAFJ;AAQD,KAjGyB;;AAGxB,UAAKV,YAAL,GAAoBzB,MAAMyB,YAA1B;AAHwB;AAIzB;;AAED;;;AA+DA;;;EAtE4Cc,gB;;kBAAzBxC,gB","file":"blockquote.js","sourcesContent":["/* eslint-disable prefer-reflect, default-case, react/display-name */\nimport BlockquoteIcon from 'material-ui-icons/FormatQuote'\nimport React from 'react'\nimport createBlockquotePlugin from 'slate-edit-blockquote'\n\nimport { makeTagNode, ToolbarButton } from '../helpers'\nimport Plugin from './Plugin'\nimport type { Props } from './props'\n\nexport const BLOCKQUOTE = 'BLOCKQUOTE/BLOCKQUOTE'\n\nexport default class BlockquotePlugin extends Plugin {\n  constructor(props: Props) {\n    super(props)\n\n    this.DEFAULT_NODE = props.DEFAULT_NODE\n  }\n\n  // eslint-disable-next-line react/display-name\n  Button = ({ editorState, onChange }: Props) => {\n    const onClick = e => {\n      e.preventDefault()\n\n      const isActive = editorState.blocks.some(block =>\n        Boolean(\n          editorState.document.getClosest(\n            block.key,\n            parent => parent.type === BLOCKQUOTE\n          )\n        )\n      )\n\n      let transform = editorState.transform()\n\n      if (isActive) {\n        transform = transform.unwrapBlock(BLOCKQUOTE)\n      } else {\n        transform = transform.wrapBlock(BLOCKQUOTE)\n      }\n\n      onChange(transform.apply())\n    }\n\n    const isActive = editorState.blocks.some(block =>\n      Boolean(\n        editorState.document.getClosest(\n          block.key,\n          parent => parent.type === BLOCKQUOTE\n        )\n      )\n    )\n\n    // In the interests of backwards compatability, this plugin is 'enabled'\n    // but the button it uses is hidden. This is so any articles/pages currently\n    // using the plugin aren't affected by it being disabled.\n    return null;\n\n    /*\n    return (\n      <ToolbarButton\n        onClick={onClick}\n        isActive={isActive}\n        icon={<BlockquoteIcon />}\n      />\n    )\n    */\n  }\n\n  name = 'blockquote'\n\n  nodes = {\n    [BLOCKQUOTE]: makeTagNode('blockquote')\n  }\n\n  plugins = [\n    createBlockquotePlugin({\n      type: BLOCKQUOTE,\n      typeDefault: this.DEFAULT_NODE\n    })\n  ]\n\n  //toolbarButtons = [this.Button]\n\n  deserialize = (el, next) => {\n    switch (el.tagName.toLowerCase()) {\n      case 'blockquote':\n        return {\n          kind: 'block',\n          type: BLOCKQUOTE,\n          nodes: next(el.childNodes)\n        }\n    }\n  }\n\n  serialize = (\n    object: { type: string, kind: string, data: any },\n    children: any[]\n  ) => {\n    if (object.kind !== 'block') {\n      return\n    }\n    switch (object.type) {\n      case BLOCKQUOTE:\n        return (\n          <blockquote style={{ textAlign: object.data.get('align') }}>\n            {children}\n          </blockquote>\n        )\n    }\n  }\n}\n"]}