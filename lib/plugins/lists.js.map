{"version":3,"sources":["../../src/plugins/lists.js"],"names":["React","FormatListBulletedIcon","FormatListNumberedIcon","createListPlugin","makeTagNode","ToolbarButton","Plugin","UL","OL","LI","ListsPlugin","props","createButton","type","icon","editorState","onChange","onClick","e","preventDefault","isList","blocks","some","block","isType","Boolean","document","getClosest","key","parent","transform","setBlock","DEFAULT_NODE","unwrapBlock","wrapBlock","apply","name","nodes","toolbarButtons","deserialize","el","next","tagName","toLowerCase","kind","childNodes","serialize","object","children","plugins","typeUL","typeOL","typeItem","typeDefault"],"mappings":"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","file":"lists.js","sourcesContent":["/* eslint-disable prefer-reflect, default-case, react/display-name */\nimport React from 'react'\nimport FormatListBulletedIcon from 'material-ui-icons/FormatListBulleted'\nimport FormatListNumberedIcon from 'material-ui-icons/FormatListNumbered'\nimport createListPlugin from 'slate-edit-list'\nimport type { Props } from './props'\n\nimport { makeTagNode, ToolbarButton } from '../helpers'\nimport Plugin from './Plugin'\n\nexport const UL = 'LISTS/UNORDERED-LIST'\nexport const OL = 'LISTS/ORDERED-LIST'\nexport const LI = 'LISTS/LIST-ITEM'\n\nexport default class ListsPlugin extends Plugin {\n  constructor(props: Props) {\n    super(props)\n\n    this.plugins = [\n      createListPlugin({\n        typeUL: UL,\n        typeOL: OL,\n        typeItem: LI,\n        typeDefault: props.DEFAULT_NODE\n      })\n    ]\n  }\n\n  props: Props\n\n  // eslint-disable-next-line react/display-name\n  createButton = (type, icon) => ({ editorState, onChange }: Props) => {\n    const onClick = e => {\n      e.preventDefault()\n\n      const isList = editorState.blocks.some(block => block.type === LI)\n      const isType = editorState.blocks.some(block =>\n        Boolean(\n          editorState.document.getClosest(\n            block.key,\n            parent => parent.type === type\n          )\n        )\n      )\n\n      let transform = editorState.transform()\n\n      if (isList && isType) {\n        transform = transform\n          .setBlock(this.DEFAULT_NODE)\n          .unwrapBlock(UL)\n          .unwrapBlock(OL)\n      } else if (isList) {\n        transform = transform.unwrapBlock(type === UL ? OL : UL).wrapBlock(type)\n      } else {\n        transform = transform.setBlock(LI).wrapBlock(type)\n      }\n\n      onChange(transform.apply())\n    }\n\n    const isList = editorState.blocks.some(block => block.type === LI)\n    const isType = editorState.blocks.some(block =>\n      Boolean(\n        editorState.document.getClosest(\n          block.key,\n          parent => parent.type === type\n        )\n      )\n    )\n\n    return (\n      <ToolbarButton\n        onClick={onClick}\n        isActive={isList && isType}\n        icon={icon}\n      />\n    )\n  }\n\n  name = 'lists'\n\n  nodes = {\n    [UL]: makeTagNode('ul'),\n    [OL]: makeTagNode('ol'),\n    [LI]: makeTagNode('li')\n  }\n\n  toolbarButtons = [\n    this.createButton(UL, <FormatListBulletedIcon />),\n    this.createButton(OL, <FormatListNumberedIcon />)\n  ]\n\n  deserialize = (el, next) => {\n    switch (el.tagName.toLowerCase()) {\n      case 'ul':\n        return {\n          kind: 'block',\n          type: UL,\n          nodes: next(el.childNodes)\n        }\n      case 'li':\n        return {\n          kind: 'block',\n          type: LI,\n          nodes: next(el.childNodes)\n        }\n      case 'ol':\n        return {\n          kind: 'block',\n          type: OL,\n          nodes: next(el.childNodes)\n        }\n    }\n  }\n\n  serialize = (object: { type: string, kind: string }, children: any[]) => {\n    if (object.kind !== 'block') {\n      return\n    }\n    switch (object.type) {\n      case UL:\n        return <ul>{children}</ul>\n      case LI:\n        return <li>{children}</li>\n      case OL:\n        return <ol>{children}</ol>\n    }\n  }\n}\n"]}