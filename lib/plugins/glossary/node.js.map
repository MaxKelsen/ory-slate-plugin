{"version":3,"sources":["../../../src/plugins/glossary/node.js"],"names":["React","Popover","Typography","request","METADATA_SERVICE","process","env","REACT_APP_METADATA_SERVICE","Glossary","props","handlePopoverOpen","state","definition","setState","anchor","event","target","persist","get","node","data","then","res","body","catch","console","log","Error","err","handlePopoverClose","bind","attributes","children","id","open","vertical","horizontal","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,OAAP,MAAoB,YAApB;;AAEA,IAAMC,mBAAmBC,QAAQC,GAAR,CAAYC,0BAArC;;IAEMC,Q;;;AACJ,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA,oHACXA,KADW;;AAAA,UAWnBC,iBAXmB,GAWC,iBAAS;AAC3B,UAAG,MAAKC,KAAL,CAAWC,UAAd,EAA0B;AACxB,cAAKC,QAAL,CAAc,EAAEC,QAAQC,MAAMC,MAAhB,EAAd;AACD,OAFD,MAEO;AACLD,cAAME,OAAN;AACAd,gBAAQe,GAAR,CAAed,gBAAf,4BAAsD,MAAKK,KAAL,CAAWU,IAAX,CAAgBC,IAAhB,CAAqBF,GAArB,CAAyB,IAAzB,CAAtD,EACGG,IADH,CACQ,eAAO;AACX,gBAAKR,QAAL,CAAc;AACZC,oBAAQC,MAAMC,MADF;AAEZJ,wBAAYU,IAAIC,IAAJ,CAASX;AAFT,WAAd;AAID,SANH,EAMKY,KANL,CAMW;AAAA,iBAAOC,QAAQC,GAAR,CAAY,IAAIC,KAAJ,CAAUC,GAAV,CAAZ,CAAP;AAAA,SANX;AAOD;AACF,KAxBkB;;AAAA,UA0BnBC,kBA1BmB,GA0BE,YAAM;AACzB,YAAKhB,QAAL,CAAc,EAAEC,QAAQ,IAAV,EAAd;AACD,KA5BkB;;AAEjB,UAAKH,KAAL,GAAa;AACXC,kBAAY,IADD;AAEXE,cAAQ;AAFG,KAAb;;AAKA,UAAKe,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBC,IAAxB,OAA1B;AACA,UAAKpB,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBoB,IAAvB,OAAzB;AARiB;AASlB;;;;6BAqBQ;AAAA,UACCV,IADD,GACU,KAAKX,KAAL,CAAWU,IADrB,CACCC,IADD;AAAA,mBAE0B,KAAKX,KAF/B;AAAA,UAECsB,UAFD,UAECA,UAFD;AAAA,UAEaC,QAFb,UAEaA,QAFb;;AAGP,UAAMC,KAAKb,KAAKF,GAAL,CAAS,IAAT,CAAX;AAHO,mBAIwB,KAAKP,KAJ7B;AAAA,UAICG,MAJD,UAICA,MAJD;AAAA,UAISF,UAJT,UAISA,UAJT;;AAKP,UAAMsB,OAAO,CAAC,CAACpB,MAAf;;AAEA,aACE;AAAA;AAAA;AACE,uBAAa,KAAKJ,iBADpB;AAEE,sBAAY,KAAKmB;AAFnB,WAGME,UAHN;AAIE,cAAIE;AAJN;AAME;AAAA;AAAA;AACGD;AADH,SANF;AASE;AAAC,iBAAD;AAAA;AACE,kBAAME,IADR;AAEE,sBAAUpB,MAFZ;AAGE,0BAAc;AACZqB,wBAAU,QADE;AAEZC,0BAAY;AAFA,aAHhB;AAOE,6BAAiB;AACfD,wBAAU,KADK;AAEfC,0BAAY;AAFG,aAPnB;AAWE,4BAAgB,KAAKP;AAXvB;AAaE;AAAC,sBAAD;AAAA;AAAajB;AAAb;AAbF;AATF,OADF;AA2BD;;;;EAjEoBZ,MAAMqC,S;;AAoE7B,eAAe7B,QAAf","file":"node.js","sourcesContent":["import React from 'react'\nimport Popover from 'material-ui/Popover';\nimport Typography from 'material-ui/Typography';\nimport request from 'superagent';\n\nconst METADATA_SERVICE = process.env.REACT_APP_METADATA_SERVICE;\n\nclass Glossary extends React.Component {  \n  constructor(props) {\n    super(props);\n    this.state = {\n      definition: null,\n      anchor: null,\n    }\n\n    this.handlePopoverClose = this.handlePopoverClose.bind(this);\n    this.handlePopoverOpen = this.handlePopoverOpen.bind(this);\n  }\n\n  handlePopoverOpen = event => {\n    if(this.state.definition) {\n      this.setState({ anchor: event.target });\n    } else {\n      event.persist();\n      request.get(`${METADATA_SERVICE}/glossary/search?id=${this.props.node.data.get('id')}`)\n        .then(res => {\n          this.setState({\n            anchor: event.target,\n            definition: res.body.definition,\n          });\n        }).catch(err => console.log(new Error(err)));\n    }\n  };\n\n  handlePopoverClose = () => {\n    this.setState({ anchor: null });\n  };\n\n  render() {\n    const { data } = this.props.node\n    const { attributes, children } = this.props;\n    const id = data.get('id')\n    const { anchor, definition } = this.state;\n    const open = !!anchor\n\n    return (\n      <span\n        onMouseOver={this.handlePopoverOpen}\n        onMouseOut={this.handlePopoverClose}\n        {...attributes}\n        id={id}\n      >\n        <span>\n          {children}\n        </span>\n        <Popover\n          open={open}\n          anchorEl={anchor}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: 'left',\n          }}\n          onRequestClose={this.handlePopoverClose}\n        >\n          <Typography>{definition}</Typography>\n        </Popover>\n      </span>\n    )\n  }\n}\n\nexport default Glossary;\n\n"]}