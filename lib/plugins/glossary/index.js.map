{"version":3,"sources":["../../../src/plugins/glossary/index.js"],"names":["React","Component","LibraryBooksIcon","Data","makeTagMark","ToolbarButton","Plugin","Input","InputLabel","TextField","Paper","MenuItem","Autosuggest","match","parse","Dialog","DialogActions","DialogTitle","DialogContent","Button","request","Glossary","GLOSSARY","METADATA_SERVICE","process","env","REACT_APP_METADATA_SERVICE","renderInputComponent","inputProps","autoFocus","value","ref","other","renderSuggestion","suggestion","query","isHighlighted","matches","definition","parts","map","part","idx","highlight","text","renderSuggestionContainer","options","containerProps","children","getDefinitionForSuggestion","GlossaryButton","state","open","id","term","hadDefinition","onRef","component","e","querySelector","focus","onClick","props","editorState","onChange","preventDefault","hasDefinition","inlines","some","inline","type","selection","characters","char","join","newState","transform","unwrapInline","apply","isExpanded","get","then","setState","wasExpanded","res","body","docs","catch","console","log","Error","err","handleClose","window","setTimeout","handleSubmit","add","Promise","resolve","reject","post","send","wrapInline","data","collapseToEnd","insertText","extend","length","onDefinitionChange","t","newValue","Object","handleFetchRequest","handleClearSuggested","placeholder","GlossaryPlugin","name","nodes","hoverButtons","deserialize","el","next","tagName","toLowerCase","kind","childNodes","create","attrs","find","serialize","object"],"mappings":"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","file":"index.js","sourcesContent":["/* eslint-disable prefer-reflect, default-case, react/display-name */\nimport React, {Component} from 'react';\nimport LibraryBooksIcon from 'material-ui-icons/LibraryBooks';\nimport { Data } from 'slate';\nimport { makeTagMark, ToolbarButton } from '../../helpers';\nimport Plugin from '../Plugin';\nimport Input, { InputLabel } from 'material-ui/Input';\nimport TextField from 'material-ui/TextField';\nimport Paper from 'material-ui/Paper';\nimport { MenuItem } from 'material-ui/Menu';\nimport Autosuggest from 'react-autosuggest';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport Dialog, { DialogActions, DialogTitle, DialogContent } from 'material-ui/Dialog';\nimport Button from 'material-ui/Button';\nimport request from 'superagent';\nimport Glossary from './node';\nimport type { Props } from '../props';\n\nexport const GLOSSARY = 'GLOSSARY/GLOSSARY';\nconst METADATA_SERVICE = process.env.REACT_APP_METADATA_SERVICE;\n\n\nconst renderInputComponent = (inputProps) => {\n    const { autoFocus, value, ref, ...other } = inputProps;\n    return (\n        <TextField\n            name=\"Autocomplete\"\n            label=\"Definition\"\n            inputRef={ref}\n            value={value}\n            InputProps={{\n                ...other,\n            }}\n        />\n    );\n};\n\nconst renderSuggestion = (suggestion, { query, isHighlighted }) => {\n    const matches = match(suggestion.definition, query);\n    const parts = parse(suggestion.definition, matches);\n\n    return (\n        <MenuItem selected={isHighlighted} component=\"div\">\n            <div>\n                {parts.map((part, idx) => {\n                    return part.highlight ? (\n                        <span key={part.text}>\n                            {part.text}\n                        </span>\n                    ) : (\n                        <em key={part.text}>\n                            {part.text}\n                        </em>\n                    );\n                })}\n            </div>\n        </MenuItem>\n    );\n}\n\nconst renderSuggestionContainer = (options) => {\n    const { containerProps, children } = options;\n    return (\n        <Paper {...containerProps}>\n            {children}\n        </Paper>\n    );\n}\n\nconst getDefinitionForSuggestion = (suggestion) => {\n    return suggestion;\n};\n\nclass GlossaryButton extends Component {\n    state = {\n        open: false,\n        definition: '',\n        id: '',\n        term: '',\n        options: [],\n        hadDefinition: false\n    }\n\n    props: Props\n\n    input: Component<*, *, *>\n\n    onRef = (component: Component<*, *, *>) => {\n        if (!component && true) {\n            return null\n        }\n\n        const e = component.querySelector('input')\n        if (e) {\n            e.focus()\n        }\n    }\n\n    onClick = e => {\n        const { editorState, onChange } = this.props\n        e.preventDefault()\n\n        const hasDefinition = editorState.inlines.some(\n            (inline: any) =>inline.type === GLOSSARY);\n\n        const selection = editorState.characters.map(char => char.text).join('');\n\n        if (hasDefinition) {\n            const newState = editorState\n                .transform()\n                .unwrapInline(GLOSSARY)\n                .apply()\n            onChange(newState)\n        } else if (editorState.isExpanded) {\n            request.get(`${METADATA_SERVICE}/glossary/search/${selection}`)\n                .then(res => {\n                    // Search the glossary for the term\n                    this.setState({\n                        open: true,\n                        wasExpanded: editorState.isExpanded,\n                        definition: '',\n                        id: '',\n                        term: selection,\n                        hadDefinition: hasDefinition,\n                        options: res.body.docs,\n                    });\n                }).catch(err => console.log(new Error(err)));\n        } else {\n            this.setState({\n                open: true,\n                wasExpanded: editorState.isExpanded,\n                definition: '',\n                id: '',\n                term: '',\n                options: [],\n                hadDefinition: hasDefinition\n            });\n        }\n    }\n\n    handleClose = () => {\n        this.setState({ open: false })\n\n        const newState = this.props.editorState\n            .transform()\n            .focus()\n            .apply()\n        window.setTimeout(() => this.props.onChange(newState), 1)\n    }\n\n    handleSubmit = () => {\n        this.setState({ open: false })\n\n        if (!this.state.definition) {\n            this.handleClose()\n            return\n        }\n\n        // if no id write the new term to the metadata service\n        const add = new Promise((resolve, reject) => {\n            if (!this.state.id) {\n                request.post(`${METADATA_SERVICE}/glossary`)\n                    .send({\n                        term: this.state.term,\n                        definition: this.state.definition\n                    })\n                    .then(res => {\n                        resolve(res.body.id);\n                    })\n                    .catch(err => reject(err));\n            } else {\n                resolve(this.state.id);\n            }\n        });\n\n        add.then(id => {\n            if (this.state.wasExpanded) {\n                const newState = this.props.editorState\n                    .transform()\n                    .focus()\n                    .apply()\n                    .transform()\n                    .wrapInline({\n                        type: GLOSSARY,\n                        data: { id },\n                    })\n                    .collapseToEnd()\n                    .apply()\n\n                window.setTimeout(() => this.props.onChange(newState), 1)\n                window.setTimeout(() => this.props.focus(), 100)\n                return\n            }\n\n            const newState = this.props.editorState\n                .transform()\n                .insertText(this.state.term)\n                .extend(-this.state.term.length)\n                .wrapInline({\n                    type: GLOSSARY,\n                    data: { id }\n                })\n                .collapseToEnd()\n                .focus()\n                .apply()\n\n            this.props.onChange(newState)\n            window.setTimeout(() => this.props.focus(), 100)\n        }).catch(err => console.log(err));\n    }\n\n    onDefinitionChange = (e, t) => {\n        if(t.newValue instanceof Object) {\n            this.setState({\n                definition: t.newValue.definition,\n                id: t.newValue.id,\n            });\n        } else {\n            this.setState({\n                definition: t.newValue,\n                id: null,\n            });\n        }\n    }\n\n    handleFetchRequest = e => {\n        if(e.value.length > 3) {\n            if (e.value != this.state.term) {\n                // do a new search\n                request.get(`${METADATA_SERVICE}/glossary/search/${e.value}`)\n                    .then(res => {\n                        this.setState({\n                            options: res.body.docs\n                        });\n                    }).catch(err => console.log(new Error(err)));\n            }\n        }\n    }\n\n    handleClearSuggested = () => {\n        this.setState({\n            options: [],\n        });\n    }\n\n    render() {\n        const { editorState } = this.props\n\n        const hasDefinition = editorState.inlines.some(\n            (inline: any) => inline.type === GLOSSARY\n        )\n\n        return (\n            <span>\n                <ToolbarButton\n                    onClick={this.onClick}\n                    isActive={hasDefinition}\n                    icon={<LibraryBooksIcon />}\n                />\n                <span>\n                    <Dialog\n                        className=\"ory-prevent-blur\"\n                        open={this.state.open}\n                    >\n                        <DialogTitle>Add or Select a Glossary Definition</DialogTitle>\n                        <DialogContent>\n                            {this.state.wasExpanded ? null : (\n                                <TextField\n                                    id=\"term\"\n                                    label=\"Term\"\n                                    hintText=\"Glossary Term\"\n                                    value={this.state.term}\n                                />\n                            )}\n                            <Autosuggest\n                                renderInputComponent={renderInputComponent}\n                                suggestions={this.state.options}\n                                onSuggestionsFetchRequested={this.handleFetchRequest}\n                                onSuggestionsClearRequested={this.handleClearSuggested}\n                                getSuggestionValue={getDefinitionForSuggestion}\n                                renderSuggestionsContainer={renderSuggestionContainer}\n                                renderSuggestion={renderSuggestion}\n                                inputProps={{\n                                    placeholder: 'Select a definition or enter a new definition',\n                                    value: this.state.definition,\n                                    onChange: this.onDefinitionChange,\n                                }}\n                                id=\"definition\"\n                            />\n                        </DialogContent>\n                        <DialogActions>\n                            <Button\n                                key=\"0\"\n                                color=\"accent\"\n                                onClick={this.handleClose}\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                key=\"1\"\n                                color=\"primary\"\n                                onClick={this.handleSubmit}\n                            >\n                                Submit\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n                </span>\n            </span>\n        )\n    }\n}\n\nexport default class GlossaryPlugin extends Plugin {\n    name = 'glossary'\n\n    nodes = { [GLOSSARY]: Glossary }\n\n    hoverButtons = [GlossaryButton]\n\n    deserialize = (el, next) => {\n        switch (el.tagName.toLowerCase()) {\n            case 'glossary':\n                return {\n                    kind: 'inline',\n                    type: GLOSSARY,\n                    nodes: next(el.childNodes),\n                    data: Data.create({\n                        id: (el.attrs.find(({ name }) => name === 'id') || {\n                            value: ''\n                        }).value\n                    })\n                }\n        }\n    }\n\n    serialize = (\n        object: { type: string, kind: string, data: any },\n        children: any[]\n    ) => {\n        if (object.kind !== 'inline') {\n            return\n        }\n\n        switch (object.type) {\n            case GLOSSARY:\n                return <Glossary node={object.data}>{children}</Glossary>\n        }\n    }\n}"]}