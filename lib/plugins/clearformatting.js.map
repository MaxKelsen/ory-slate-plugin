{"version":3,"sources":["../../src/plugins/clearformatting.js"],"names":["FormatClearIcon","React","makeTagNode","ToolbarButton","Plugin","ClearPlugin","props","Button","editorState","onChange","onClick","e","preventDefault","transform","setBlock","DEFAULT_NODE","apply","marks","forEach","toggleMark","mark","type","blocks","unwrapBlock","block","inlines","unwrapInline","inline","hoverButtons"],"mappings":";;;;;;AAAA;AACA,OAAOA,eAAP,MAA4B,+BAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,YAA3C;AACA,OAAOC,MAAP,MAAmB,UAAnB;;IAGqBC,W;;;AACjB,yBAAYC,KAAZ,EAA0B;AAAA;;AAAA,8HAChBA,KADgB;;AAAA,cAO1BC,MAP0B,GAOjB,gBAAsC;AAAA,gBAAnCC,WAAmC,QAAnCA,WAAmC;AAAA,gBAAtBC,QAAsB,QAAtBA,QAAsB;;AAC3C,gBAAMC,UAAU,SAAVA,OAAU,IAAK;AACjBC,kBAAEC,cAAF;;AAEA,oBAAIC,YAAYL,YAAYK,SAAZ,EAAhB;AACAA,4BAAYA,UAAUC,QAAV,CAAmB,MAAKC,YAAxB,CAAZ;AACAN,yBAASI,UAAUG,KAAV,EAAT;;AAEAR,4BAAYS,KAAZ,CAAkBC,OAAlB,CAA0B,gBAAQ;AAC9BL,gCAAYA,UAAUM,UAAV,CAAqBC,KAAKC,IAA1B,CAAZ;AACAZ,6BAASI,UAAUG,KAAV,EAAT;AACH,iBAHD;;AAKAR,4BAAYc,MAAZ,CAAmBJ,OAAnB,CAA2B,iBAAS;AAChCL,gCAAYA,UAAUU,WAAV,CAAsBC,MAAMH,IAA5B,CAAZ;AACAZ,6BAASI,UAAUG,KAAV,EAAT;AACH,iBAHD;;AAKAR,4BAAYiB,OAAZ,CAAoBP,OAApB,CAA4B,kBAAU;AAClCL,gCAAYA,UAAUa,YAAV,CAAuBC,OAAON,IAA9B,CAAZ;AACAZ,6BAASI,UAAUG,KAAV,EAAT;AACH,iBAHD;AAKH,aAtBD;;AAwBA,mBACI,oBAAC,aAAD;AACI,yBAASN,OADb;AAEI,sBAAM,oBAAC,eAAD;AAFV,cADJ;AAMH,SAtCyB;;AAAA,cAwC1BkB,YAxC0B,GAwCX,CAAC,MAAKrB,MAAN,CAxCW;;;AAGtB,cAAKQ,YAAL,GAAoBT,MAAMS,YAA1B;AAHsB;AAIzB;;AAED;;;;EAPqCX,M;;eAApBC,W","file":"clearformatting.js","sourcesContent":["/* eslint-disable prefer-reflect, default-case, react/display-name */\nimport FormatClearIcon from 'material-ui-icons/FormatClear'\nimport React from 'react'\n\nimport { makeTagNode, ToolbarButton } from '../helpers'\nimport Plugin from './Plugin'\nimport type { Props } from './props'\n\nexport default class ClearPlugin extends Plugin {\n    constructor(props: Props) {\n        super(props)\n\n        this.DEFAULT_NODE = props.DEFAULT_NODE\n    }\n\n    // eslint-disable-next-line react/display-name\n    Button = ({ editorState, onChange }: Props) => {\n        const onClick = e => {\n            e.preventDefault()\n\n            let transform = editorState.transform()\n            transform = transform.setBlock(this.DEFAULT_NODE)\n            onChange(transform.apply());\n\n            editorState.marks.forEach(mark => {\n                transform = transform.toggleMark(mark.type);\n                onChange(transform.apply())\n            });\n\n            editorState.blocks.forEach(block => {\n                transform = transform.unwrapBlock(block.type);\n                onChange(transform.apply())\n            });\n\n            editorState.inlines.forEach(inline => {\n                transform = transform.unwrapInline(inline.type);\n                onChange(transform.apply());\n            });\n\n        }\n\n        return (\n            <ToolbarButton\n                onClick={onClick}\n                icon={<FormatClearIcon />}\n            />\n        )\n    }\n\n    hoverButtons = [this.Button]\n}\n"]}