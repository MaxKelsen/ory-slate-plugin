{"version":3,"sources":["../src/index.js"],"names":["SubjectIcon","compose","flatten","map","mergeAll","prop","pathOr","Html","React","ActionTypes","Component","Plugin","hooks","parse5","createNodes","createMarks","createPlugins","createInitialState","html","rules","defaultPlugins","lineBreakSerializer","parseHtml","parseFragment","plugins","props","schema","nodes","marks","onKeyDown","e","data","state","isMod","key","isShift","transform","insertText","apply","i","length","newState","HoverButtons","editorState","onChange","focus","plugin","hoverButtons","Button","j","ToolbarButtons","toolbarButtons","Slate","cellProps","StaticComponent","__html","serialize","name","version","IconComponent","text","description","allowInlineNeighbours","handleFocus","source","isFocused","setTimeout","handleBlur","blur","reducer","action","type","UNDO","REDO","content","merge","isNative","handleRemoveHotKey","handleFocusPreviousHotKey","handleFocusNextHotKey","unserialize"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\n// TODO lint: prefer-reflect doesn't work with slate state #158\n/* eslint no-duplicate-imports: [\"off\"] */\n/* eslint prefer-reflect: [\"off\"] */\nimport SubjectIcon from 'material-ui-icons/Subject'\nimport { compose, flatten, map, mergeAll, prop, pathOr } from 'ramda'\nimport { Html } from 'slate'\nimport React from 'react'\nimport { ActionTypes } from 'redux-undo'\nimport Component from './Component'\nimport type { Props } from './Component'\nimport Plugin from './plugins/Plugin'\n// import KatexPlugin from './plugins/katex'\nimport * as hooks from './hooks'\nimport parse5 from 'parse5'\n\nconst createNodes = compose(mergeAll, map(prop('nodes')))\nconst createMarks = compose(mergeAll, map(prop('marks')))\nconst createPlugins = compose(flatten, map(prop('plugins')))\n\nexport const createInitialState = hooks.createInitialState\n\nexport const html = new Html({\n    rules: [...hooks.defaultPlugins, hooks.lineBreakSerializer],\n    parseHtml: parse5.parseFragment\n})\n\nexport default (plugins: Plugin[] = hooks.defaultPlugins) => {\n    const props = {}\n    props.schema = {\n        nodes: createNodes(plugins),\n        marks: createMarks(plugins)\n    }\n    props.plugins = createPlugins(plugins)\n    props.onKeyDown = (\n        e: Event,\n        data: { key: string, isMod: boolean, isShift: boolean },\n        state: any\n    ) => {\n        // we need to prevent slate from handling undo and redo\n        if (data.isMod && (data.key === 'z' || data.key === 'y')) {\n            return state\n        }\n\n        if (data.isShift && data.key === 'enter') {\n            return state\n                .transform()\n                .insertText('\\n')\n                .apply()\n        }\n\n        for (let i = 0; i < plugins.length; i++) {\n            const { onKeyDown } = plugins[i]\n            const newState = onKeyDown && onKeyDown(e, data, state)\n\n            if (newState) {\n                return newState\n            }\n        }\n\n        return\n    }\n\n    const HoverButtons = ({ editorState, onChange, focus }: Props) => (\n        <div>\n            {plugins.map((plugin: Plugin, i: number) =>\n                plugin.hoverButtons.map((Button: any, j: number) => (\n                    <Button\n                        key={`${i}-${j}`}\n                        editorState={editorState}\n                        onChange={onChange}\n                        focus={focus}\n                    />\n                ))\n            )}\n        </div>\n    )\n    props.HoverButtons = HoverButtons\n\n    const ToolbarButtons = ({ editorState, onChange, focus }: Props) => (\n        <div>\n            {plugins.map((plugin: Plugin, i: number) => (\n                    <span>\n                        {plugin.toolbarButtons.map((Button: any, j: number) => {\n                            if(Button) {\n                                return(<Button\n                                    key={`${i}-${j}`}\n                                    editorState={editorState}\n                                    onChange={onChange}\n                                    focus={focus}\n                                />)\n                            }\n                        })}\n                        { plugin.toolbarButtons && plugin.toolbarButtons.length > 0 && <span>|</span> }\n                    </span>\n                )\n            )}\n        </div>\n    )\n    props.ToolbarButtons = ToolbarButtons\n\n    const Slate = (cellProps: Props) => <Component {...cellProps} {...props} />\n    const StaticComponent = ({ state: { editorState } = {} }: Props) => (\n        <div dangerouslySetInnerHTML={{ __html: html.serialize(editorState) }} />\n    )\n    return {\n        Component: Slate,\n        StaticComponent,\n        name: 'ory/editor/core/content/slate',\n        version: '0.0.1',\n        IconComponent: <SubjectIcon />,\n        text: 'Text',\n        description: 'An advanced rich text area.',\n        allowInlineNeighbours: true,\n        handleFocus: (props: Props, source: string) => {\n            if (source === 'onMouseDown') {\n                return\n            } else if (props.state.editorState.isFocused) {\n                return\n            }\n\n            setTimeout(() => {\n                props.onChange({\n                    editorState: props.state.editorState\n                        .transform()\n                        .focus()\n                        .apply()\n                })\n            }, 0)\n        },\n        handleBlur: (props: Props) => {\n            if (!props.state.editorState.isFocused) {\n                return\n            }\n            props.onChange({\n                editorState: props.state.editorState\n                    .transform()\n                    .blur()\n                    .apply()\n            })\n        },\n        reducer: (state: any, action: any) => {\n            if (\n                (action.type === ActionTypes.UNDO ||\n                    action.type === ActionTypes.REDO) &&\n                    pathOr(false, ['content', 'state', 'editorState'], state)\n            ) {\n                return {\n                    ...state,\n                    content: {\n                        ...state.content,\n                        state: {\n                            ...state.content.state,\n                            editorState: state.content.state.editorState.merge({\n                                isNative: false\n                            })\n                        }\n                    }\n                }\n            }\n            return state\n        },\n\n        handleRemoveHotKey: hooks.handleRemoveHotKey,\n        handleFocusPreviousHotKey: hooks.handleFocusPreviousHotKey,\n        handleFocusNextHotKey: hooks.handleFocusNextHotKey,\n\n        createInitialState: hooks.createInitialState,\n        serialize: hooks.serialize,\n        unserialize: hooks.unserialize\n    }\n}\n"]}